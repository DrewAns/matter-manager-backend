// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  String   @id                @db.Uuid @default(dbgenerated("uuid_generate_v1()"))
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  username     String             @unique
  email        String?            @unique
  role         Role               @default(USER)
  firstName    String
  lastName     String 
  abbreviation String             @unique
  deletedAt    DateTime?

  internalNotes    InternalNote[]
}

enum Role {
  USER
  ADMIN
}

model Client {
  id  String   @id                @db.Uuid @default(dbgenerated("uuid_generate_v1()"))
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  name         String             
  suffix       String?      
  type         ClientType         @default(NON_ASSOCIATION)
  deletedAt    DateTime?
  emailAddresses EmailAddress[]
  matters      Matter[]
}

enum ClientType {
  ASSOCIATION
  NON_ASSOCIATION
}

model EmailAddress {
  id  String       @id                @db.Uuid @default(dbgenerated("uuid_generate_v1()"))
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  client           Client             @relation(fields: [clientId], references: [id])
  clientId         String             @db.Uuid
  memberName       String
  email            String
  shouldSendReport Boolean
  deletedAt        DateTime?
}

model MatterStatus {
  id  String       @id                @db.Uuid @default(dbgenerated("uuid_generate_v1()"))
  status           String             @unique
  matters          Matter[]
}

model Matter {
  id  String       @id                @db.Uuid @default(dbgenerated("uuid_generate_v1()"))
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  status           MatterStatus       @relation(fields: [statusId], references: [id])
  statusId         String             @db.Uuid
  client           Client             @relation(fields: [clientId], references: [id])
  clientId         String             @db.Uuid
  project          String?
  fileNumber       String
  closedAt         DateTime?
  deletedAt        DateTime?
  needsWrittenConfirmation Boolean
  confirmedAt      DateTime?
  
  internalNotes    InternalNote[]
}

model InternalNote {
  id  String       @id                @db.Uuid @default(dbgenerated("uuid_generate_v1()"))
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  note             String
  addedByUser      User               @relation(fields: [addedBy], references: [id])
  addedBy          String             @db.Uuid
  matter           Matter             @relation(fields: [matterId], references: [id])
  matterId         String             @db.Uuid

  deletedAt        DateTime?
}
